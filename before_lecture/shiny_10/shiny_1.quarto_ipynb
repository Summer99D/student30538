{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Dashboards + Shiny I (Lecture 10)\"\n",
        "author: \"Peter Ganong and Maggie Shi\"\n",
        "date: today\n",
        "date-format: long\n",
        "format: \n",
        "    beamer:\n",
        "        echo: true\n",
        "        aspectratio: 169\n",
        "        theme: default\n",
        "        toc: true\n",
        "        header-includes: |\n",
        "            \\renewcommand{\\tightlist}{\\setlength{\\itemsep}{5ex}\\setlength{\\parskip}{0pt}}\n",
        "            \\setbeamertemplate{footline}[frame number]\n",
        "            \\usepackage{fvextra}\n",
        "            \\DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\\\\{\\}}\n",
        "            \\DefineVerbatimEnvironment{OutputCode}{Verbatim}{breaklines,commandchars=\\\\\\{\\}}\n",
        "---\n",
        "\n",
        "\n",
        "# Introduction\n",
        "\n",
        "## From A Static Process\n",
        "![](pictures/process_1.pdf){ width=70% fig-align=\"center\"}\n",
        "\n",
        "## To A Dynamic Process\n",
        "![](pictures/process_2.pdf){ width=70% fig-align=\"center\"}\n",
        "\n",
        "## To A Dynamic Process\n",
        "![](pictures/process_3.pdf){ width=70% fig-align=\"center\"}\n",
        "\n",
        "## To A Dynamic Process\n",
        "![](pictures/process_4.pdf){ width=70% fig-align=\"center\"}\n",
        "\n",
        "## Dashboards \n",
        "\n",
        "* When you analyze a dataset, your process looks a lot more like the dynamic one than the static one. Dashboards allow someone who does not code to do a limited version of the same process you go through.\n",
        "* There are two other major benefits of dashboards which we will not spend time on in class, but you should also know about \n",
        "    * Consolidated information: aggregate data from various sources into one unified interface\n",
        "    * Real-time data metrics: dynamic view based on automatically-updated data feed \n",
        "* *(Impressive: they are a great way to flex your data skills for your portfolio!)*\n",
        "\n",
        "\n",
        "## Dashboard Examples\n",
        "[Tipping Dashboard (link)](https://gallery.shinyapps.io/template-dashboard-tips1/?_gl=1*8eg1ly*_ga*NTIzNjY0NzA4LjE3MjA2MjE0MTU.*_ga_2C0WZ1JHG0*MTcyNDM1NzM4NC40LjEuMTcyNDM1NzQ3MS4wLjAuMA..)\n",
        "\n",
        "![](pictures/restaurant_tip.png){ width=70% fig-align=\"center\"}\n",
        "\n",
        "\n",
        "\n",
        "## Dashboard Examples\n",
        "[NBA Dashboard (link)](https://gallery.shinyapps.io/template-nba-dashboard/?_gl=1*8eg1ly*_ga*NTIzNjY0NzA4LjE3MjA2MjE0MTU.*_ga_2C0WZ1JHG0*MTcyNDM1NzM4NC40LjEuMTcyNDM1NzQ3MS4wLjAuMA..)\n",
        "\n",
        "![](pictures/nba.png){ width=70% fig-align=\"center\"}\n",
        "\n",
        "\n",
        "## Dashboards: Promises and Pitfall\n",
        "\n",
        "When Professor Ganong worked in the Mayor's Office in Boston, the mayor asked for every single department to suggest metrics for a dashboard. The mayor put a TV in his office so that the dashboards would be displayed at all times.\n",
        "\n",
        "Discussion questions: \n",
        "\n",
        "1. What are examples of data that a city would benefit from tracking with a dashboard?\n",
        "2. What are examples of data where putting it on a dashboard might inadvertently lead to poor management or create bad incentives for workers?\n",
        "\n",
        "\n",
        "## Shiny\n",
        "- `shiny` is a framework for creating dashboards and web apps\n",
        "- Originally developed for R, but now available for Python\n",
        "- In Terminal/command line:\n",
        "\n",
        "```{}\n",
        "$ pip install shiny\n",
        "```\n",
        "\n",
        "In this lecture: `$` means run at the terminal (on Macs the prefix is `%`)\n",
        "\n",
        "## Introduction: summary\n",
        "\n",
        "* Dashboards let non-coders interact with data\n",
        "* There are many ways to build a dashboard, we will use shiny\n",
        "* If you haven't installed shiny yet, please install it now \n",
        "\n",
        "\n",
        "# Anatomy of All Shiny Apps\n",
        "\n",
        "## Anatomy of All Shiny Apps: Roadmap \n",
        "- Introduce vocabulary: User interface (UI) and Server\n",
        "- UI input elements\n",
        "- Server examples\n",
        "- UI output elements\n",
        "- Syntax for all shiny apps\n",
        "\n",
        "## Shiny Program Components\n",
        "\n",
        "Shiny programs have 2 main components \n",
        "\n",
        "\\vspace{2ex}\n",
        "\n",
        "1. **User interface (UI)** : defines the layout and elements users interact with\n",
        "    \\vspace{2ex}\n",
        "    - UI side is basically the 'decorative' part of the Shiny program -- akin to web design\n",
        "2. **Server**: logic that processes inputs and outputs \n",
        "    - Server side is where the Python code is\n",
        "\n",
        "\n",
        "- In this class, both the UI and the server run on a single computer -- yours. \n",
        "- Note: Shiny apps can't be run directly out of VSCode or in code chunks. Instead, we will deploy from the command line, as we will see in a few slides\n",
        "\n",
        "## UI Examples: Input Elements\n",
        "![](pictures/input_1.png){ width=70% fig-align=\"center\"}\n",
        "\n",
        "## UI Examples: Input Elements\n",
        "![](pictures/input_2.png){ width=60% fig-align=\"center\"}\n",
        "\n",
        "\n",
        "## Server Examples\n",
        "\n",
        "* Read in a CSV file\n",
        "* Make a graph\n",
        "* Make a map\n",
        "* Compute statistics for a place/time period/subgroup of interest\n",
        "* Run a machine learning algorithm, report predictions in a table\n",
        "\n",
        "## UI Examples: Output Elements\n",
        "![](pictures/output_1.png){ width=55% fig-align=\"center\"}\n",
        "\n",
        "\n",
        "## UI and Server\n",
        "![](pictures/process_5.pdf){ width=70% fig-align=\"center\"}\n",
        "\n",
        "\n",
        "## Shiny App Syntax\n",
        "Shiny apps always have the following structure:\n",
        "\n",
        ":::: {.columns}\n",
        "\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "04891181"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | eval: false\n",
        "from shiny import App, render, ui\n",
        "\n",
        "app_ui = ui.page_fluid(\n",
        "    [CODE TO LAY OUT THE PAGE]\n",
        ")\n",
        "\n",
        "def server(input, output, session):\n",
        "    [CODE THAT HANDLES PYTHON]\n",
        "\n",
        "app = App(app_ui, server)"
      ],
      "id": "9c63e30e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "- **UI**: `app_ui = ui.page_fluid(...)`\n",
        "\n",
        "\\vspace{4ex}\n",
        "\n",
        ". . . \n",
        "\n",
        "- **Server**: `def server(input, output, session):`\n",
        "\n",
        "\n",
        "\\vspace{4ex}\n",
        "\n",
        ". . . \n",
        "\n",
        "- **App**: always ends with `app = App(app_ui, server)`\n",
        ":::\n",
        "\n",
        "::::\n",
        "\n",
        "## Anatomy of All Shiny Apps: Summary\n",
        "\n",
        "- Shiny app is always composed of a **UI** side and  **server** side\n",
        "- UI side has elements that take in *input*: check boxes, numeric inputs, slider\n",
        "- Pass these inputs to the server, get back computation results\n",
        "- UI then displays *output*: text, figures, data\n",
        "\n",
        "\n",
        "# Build Your First Shiny App \n",
        "## Your First Shiny App: Roadmap\n",
        "\n",
        "Steps\n",
        "\n",
        "1. Navigate through command line to the folder where the app will be stored \n",
        "2. Create a basic app\n",
        "3. Deploy and display it in a web browser\n",
        "\n",
        "Plan of action: I will show this step-by-step and then you will try it.\n",
        "\n",
        "\n",
        "## Creating a New Shiny App \n",
        "- We initialize Shiny apps from the command line -- not in Python \n",
        "- This means our usual workflow of running code chunks out of VSCode won't work\n",
        "- Instead, we'll do the following:\n",
        "\n",
        ". . .\n",
        "\n",
        "\\vspace{2ex}\n",
        "\n",
        "- First, decide which folder you want the Shiny app to be using the finder\n",
        "- Then navigate there using the command line. How-to's on next slide\n",
        "\n",
        "## \n",
        "\n",
        "\\small\n",
        "\n",
        ":::: {.columns}\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "**Macs**\n",
        "\n",
        "- Right click and hover over \"Copy\"\n",
        "\n",
        "![](pictures/directory_2.png){ width=40% fig-align=\"center\"}\n",
        "\n",
        "\n",
        "- **Before** clicking \"Copy\", press \"Option\" key (‚å•)\n",
        "- It should switch to \"Copy [foldername] as Pathname\"\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "**Windows**\n",
        "\n",
        "![](pictures/directory_2_pc.png){ width=100% fig-align=\"center\"}\n",
        "\n",
        "\"Copy as Path\"\n",
        "\n",
        "Source: How-to Geek\n",
        ":::\n",
        "\n",
        "::::\n",
        "\n",
        "\\vspace{2ex}\n",
        "\n",
        "![](pictures/directory_3.png){ width=80% fig-align=\"center\"}\n",
        "\n",
        "```{}\n",
        "$ cd <dir_for_shiny_app> \n",
        "```\n",
        "\n",
        "\\normalsize\n",
        "\n",
        "\n",
        "## Create Your Shiny App\n",
        "Within that folder, type in Terminal:\n",
        "\n",
        "```{}\n",
        "$ shiny create\n",
        "```\n",
        "- If you're getting errors that `shiny` is not a recognized command, try `python -m shiny create` or `python -m shiny create`\n",
        "- Choose \"Basic app\" as the template\n",
        "    - In a future lecture we will explore the other templates\n",
        "\n",
        "\\vspace{2ex}\n",
        "\n",
        "![](pictures/directory_4.png){ width=50% fig-align=\"center\"}\n",
        "\n",
        ". . .\n",
        "\n",
        "- Don't use Shiny Express\n",
        "\n",
        "![](pictures/directory_5.png){ width=50% fig-align=\"center\"}\n",
        "\n",
        "\n",
        "## Create Your Shiny App (continued)\n",
        "- Click \"Enter\" for destination category (since you've already `cd`-ed into that directory)\n",
        "\n",
        "![](pictures/directory_6.png){ width=50% fig-align=\"center\"}\n",
        "\n",
        ". . .\n",
        "\n",
        "- You should see a new folder titled `basic-app` in your directory \n",
        "\n",
        "![](pictures/directory_7.png){ width=65% fig-align=\"center\"}\n",
        "\n",
        "\n",
        "## Your New Shiny App \n",
        "\n",
        "\\footnotesize\n",
        "\n",
        "Inside `basic-app`, you should see an `app.py` file\n"
      ],
      "id": "04cd6967"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "from shiny import App, render, ui\n",
        "\n",
        "app_ui = ui.page_fluid(\n",
        "    ui.panel_title(\"Hello Shiny!\"),\n",
        "    ui.input_slider(\"n\", \"N\", 0, 100, 20),\n",
        "    ui.output_text_verbatim(\"txt\"),\n",
        ")\n",
        "\n",
        "def server(input, output, session):\n",
        "    @render.text\n",
        "    def txt():\n",
        "        return f\"n*2 is {input.n() * 2}\"\n",
        "\n",
        "app = App(app_ui, server)"
      ],
      "id": "ce06b086",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "\\normalsize\n",
        "\n",
        "\n",
        "## Deploying Your New Shiny App \n",
        "\n",
        "- Shiny apps are deployed out of Terminal with the following line:\n",
        "\n",
        "```{}\n",
        "$ shiny run --reload basic-app/app.py\n",
        "```\n",
        "\n",
        "\\vspace{2ex}\n",
        "![](pictures/directory_9.png){ width=60% fig-align=\"center\"}\n",
        "\n",
        "\n",
        "- If the app doesn't automatically load, copy the IP address into your browser\n",
        "\n",
        "\\vspace{2ex}\n",
        "![](pictures/directory_10.png){ width=60% fig-align=\"center\"}\n",
        "\n",
        "## Deploying Your New Shiny App \n",
        "- In your browser, you should see a basic app with a slider from 0 to 100\n",
        "\\vspace{2ex}\n",
        "![](pictures/directory_11.png){ width=40% fig-align=\"center\"}\n",
        "\n",
        "## In-class exercise\n",
        "\n",
        "Follow instructions on slides 26-32 to deploy `basic-app`\n",
        "\n",
        "```{}\n",
        "$ pip install shiny\n",
        "$ cd name-of-directory/\n",
        "$ shiny create\n",
        "# choose \"Basic app\", Shiny Express -> No, directory <accept_default> #\n",
        "$ shiny run basic-app/app.py\n",
        "```\n",
        "In browser, verify that you can move the slider. Quit in terminal using CTRL+C .\n",
        "\n",
        "\\vspace{2ex}\n",
        "\n",
        "Tips:\n",
        "\n",
        "* If the app doesn‚Äôt automatically load, copy the URL into your browser. \n",
        "\n",
        "\n",
        "\n",
        "\\vspace{-1.5ex}\n",
        "- If you're getting errors that `shiny` is not a recognized command, try `python -m shiny run basic-app/app.py` or `python -m shiny run basic-app/app.py`\n",
        "\n",
        "\\vspace{-1.5ex}\n",
        "\n",
        "* Default directory names may be something other than `basic-app`\n",
        "\n",
        "\\vspace{-1.5ex}\n",
        "\n",
        "* When you are done, help a neighbor\n",
        "\n",
        "\n",
        "\n",
        "# Understand Your First Shiny App: UI\n",
        "\n",
        "## Understand Your First Shiny App: Roadmap\n",
        ":::: {.columns}\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "\\AddToHookNext{env/Highlighting/begin}{\\footnotesize}"
      ],
      "id": "f85aa0ca"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | eval: false\n",
        "# | echo: true \n",
        "from shiny import App, render, ui\n",
        "\n",
        "app_ui = ui.page_fluid(\n",
        "    ui.panel_title(\"Hello Shiny!\"),\n",
        "    ui.input_slider(\"n\", \"N\", 0, 100, 20),\n",
        "    ui.output_text_verbatim(\"txt\"),\n",
        ")\n",
        "\n",
        "def server(input, output, session):\n",
        "    @render.text\n",
        "    def txt():\n",
        "        return f\"n*2 is {input.n() * 2}\"\n",
        "\n",
        "app = App(app_ui, server)"
      ],
      "id": "ea9634d0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "![](pictures/directory_11.png){ width=90% fig-align=\"center\"}\n",
        "\n",
        "Walk through\n",
        "\n",
        "* `ui.panel_title()`\n",
        "\n",
        "\\vspace{-1ex}\n",
        "\n",
        "* `ui.input_slider()`\n",
        "\n",
        "\\vspace{-1ex}\n",
        "\n",
        "* `ui.output_text_verbatim()`\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "::::\n",
        "\n",
        "## Going back to our basic app: `app.py` \n",
        ":::: {.columns}\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "\\AddToHookNext{env/Highlighting/begin}{\\footnotesize}"
      ],
      "id": "a2cc9375"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | eval: false\n",
        "# | echo: true \n",
        "from shiny import App, render, ui\n",
        "\n",
        "app_ui = ui.page_fluid(\n",
        "    ui.panel_title(\"Hello Shiny!\"),\n",
        "    ui.input_slider(\"n\", \"N\", 0, 100, 20),\n",
        "    ui.output_text_verbatim(\"txt\"),\n",
        ")\n",
        "\n",
        "def server(input, output, session):\n",
        "    @render.text\n",
        "    def txt():\n",
        "        return f\"n*2 is {input.n() * 2}\"\n",
        "\n",
        "app = App(app_ui, server)"
      ],
      "id": "891add82",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "\\begin{center} A UI-only component: title \\end{center}\n"
      ],
      "id": "ab33ef94"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | eval: false\n",
        "# | echo: true \n",
        "ui.panel_title(\"Hello Shiny!\")"
      ],
      "id": "5220b87b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "\\vspace{2ex}\n",
        "\n",
        "- This remains static and doesn't require any computation\n",
        "- So it doesn't appear on the server side\n",
        ":::\n",
        "\n",
        "::::\n",
        "\n",
        "## Going back to our basic app: `app.py` \n",
        ":::: {.columns}\n",
        "\n",
        "\\footnotesize\n",
        "\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "b7cfe6bb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | eval: false\n",
        "# | echo: true \n",
        "from shiny import App, render, ui\n",
        "\n",
        "app_ui = ui.page_fluid(\n",
        "    ui.panel_title(\"Hello Shiny!\"),\n",
        "    ui.input_slider(\"n\", \"N\", 0, 100, 20),\n",
        "    ui.output_text_verbatim(\"txt\"),\n",
        ")\n",
        "\n",
        "def server(input, output, session):\n",
        "    @render.text\n",
        "    def txt():\n",
        "        return f\"n*2 is {input.n() * 2}\"\n",
        "\n",
        "app = App(app_ui, server)"
      ],
      "id": "e2c7b4c7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "\\begin{center} Component: **input** slider \\end{center}\n"
      ],
      "id": "a6bfcc85"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true \n",
        "ui.input_slider(\"n\", \"N\", 0, 100, 20)"
      ],
      "id": "7785722e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ". . .\n",
        "\n",
        "\\vspace{2ex}\n",
        "\n",
        "\\vspace{2ex}\n",
        "- `\"n\"`: value from user input\n",
        "- `\"N\"`: label \n",
        "- `0`: minimum of slider\n",
        "- `100`: maximum of slider\n",
        "- `20`: default value of slider \n",
        "- H[Link to sliderInput documentation](https://shiny.posit.co/r/reference/shiny/0.14/sliderinput)\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "\\normalsize\n",
        "\n",
        "\n",
        "## Going back to our basic app: `app.py` \n",
        ":::: {.columns}\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "\\AddToHookNext{env/Highlighting/begin}{\\footnotesize}"
      ],
      "id": "4da7c6f0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | eval: false\n",
        "# | echo: true \n",
        "from shiny import App, render, ui\n",
        "\n",
        "app_ui = ui.page_fluid(\n",
        "    ui.panel_title(\"Hello Shiny!\"),\n",
        "    ui.input_slider(\"n\", \"N\", 0, 100, 20),\n",
        "    ui.output_text_verbatim(\"txt\"),\n",
        ")\n",
        "\n",
        "def server(input, output, session):\n",
        "    @render.text\n",
        "    def txt():\n",
        "        return f\"n*2 is {input.n() * 2}\"\n",
        "\n",
        "app = App(app_ui, server)"
      ],
      "id": "dc345ba2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "\\footnotesize\n",
        "\n",
        "\\begin{center}Component: **output** text verbatim \\end{center}\n",
        "\n",
        "**UI**: \n"
      ],
      "id": "a997df4a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | eval: false\n",
        "# | echo: true \n",
        "ui.output_text_verbatim(\"txt\")"
      ],
      "id": "a8b3aa57",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "- This component renders text \n",
        "- What is `\"txt\"`?\n",
        "\n",
        ". . .\n",
        "\n",
        "\\vspace{2ex}\n",
        "**Server**:"
      ],
      "id": "89b71885"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | eval: false\n",
        "# | echo: true \n",
        "@render.text\n",
        "def txt():\n",
        "    return f\"n*2 is {input.n() * 2}\""
      ],
      "id": "b4ba9e9a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-  Shiny's syntax: `\"txt\"` on UI side corresponds to `txt()` on the server side\n",
        "\\vspace{-1ex}\n",
        "- Additional syntax: `@render.text` indicates that `txt()` should be rendered as text\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "\n",
        "\n",
        "\\normalsize\n",
        "\n",
        "## Render Decorators\n",
        "\n",
        "- Any function whose output you want to display must be wrapped with a **render decorators** of the correct type \n",
        "- The render decorator is always followed by the definition of a function (e.g., `def txt():`)\n",
        "\n",
        "\\vspace{2ex}\n",
        "\n",
        "\\begin{table}[h!]\n",
        "\\centering\n",
        "\\begin{tabular}{|l|l|}\n",
        "\\hline\n",
        "\\textbf{UI Side}     & \\textbf{Server Side} \\\\ \\hline\n",
        "`ui.output\\_plot`      & `@render.plot` \\\\ \\hline\n",
        "`ui.output\\_text`, `ui.output\\_text\\_verbatim`      & `@render.text` \\\\ \\hline\n",
        "`ui.output\\_table`      & `@render.table` \\\\ \\hline\n",
        "\n",
        "\\end{tabular}\n",
        "\\end{table}\n",
        "\n",
        "\n",
        "\n",
        "## Understand Your First Shiny App: Summary\n",
        "\n",
        "- UI: ask user for `ui.input_slider(\"n\")` \n",
        "- Server: receive input as as `input.n()`\n",
        "- Server: compute `input.n() * 2`\n",
        "- Server: get output from server as `def txt():`\n",
        "    - We have to declare what this output will be eventually rendered as using a decorator (`@render.text`) \n",
        "- UI: display output as `ui.output_text_verbatim(\"txt\")`\n",
        "\n",
        "## Generalizing from this Example:\n",
        "You can now see the general pattern:\n",
        "\n",
        "- *Syntax for defining input*: `\"x\"` on UI side becomes `input.x()` on server side\n",
        "\n",
        "\\vspace{-1.5ex}\n",
        "\n",
        "- *Syntax for defining output*: `def value():` on server side becomes `\"value\"` on UI side\n",
        "\\vspace{-1.5ex}\n",
        "\n",
        "- *Syntax for rendering output*: render decorators like `@render.plot`,  `@render.table`\n",
        "\n",
        "# Build Your Second Shiny App\n",
        "\n",
        "## Build Your Second Shiny App: Roadmap\n",
        "\n",
        "Goal: display a histogram of a normally-distributed sample with mean `mu`\n",
        "\n",
        "Steps\n",
        "\n",
        "1. Install package to show graphs in Altair\n",
        "1. Server side code to compute a normally-distributed sample with mean `mu`\n",
        "2. UI side code to ask for `mu` and to display the plot\n",
        "\n",
        "\n",
        "## Jupyter Widgets \n",
        "- Shiny supports Jupyter Widgets via `shinywidgets` package\n",
        "    - About 10\\% of students needed to instead use a different  `anywidget`\n",
        "- We'll focus on using `shinywidgets` to incorporate `altair` plots, but it also supports many other interactive widgets from Jupyter Notebooks: `plotly`, `pydeck`, `bokeh`, etc.\n",
        "\n",
        "```{}\n",
        "$ pip install shinywidgets\n",
        "```\n",
        "\n",
        "## Altair Jupyter Widget\n",
        "- **UI-side**: `shinywidgets` has its own UI output element: `output_widget()`\n",
        "- **Server-side**: Altair has its own render function through `shinywidgets`: `@render_altair` \n",
        "\n",
        "- First, import required packages\n"
      ],
      "id": "a82c0a90"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from shinywidgets import render_altair, output_widget\n",
        "import altair as alt"
      ],
      "id": "457ba23f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Build Your Second Shiny App \n",
        "- Starting on server side of `normal_distn_app/app.py`:\n",
        "\\AddToHookNext{env/Highlighting/begin}{\\footnotesize}"
      ],
      "id": "3e41950a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | eval: false\n",
        "# | echo: true \n",
        "def server(input, output, session):\n",
        "    # [other server-side code]\n",
        "    @render_altair\n",
        "    def my_hist():\n",
        "        sample = np.random.normal(input.mu(), 20, 100)\n",
        "        df = pd.DataFrame({'sample': sample})\n",
        "        return(\n",
        "            alt.Chart(df).mark_bar().encode(\n",
        "                alt.X('sample:Q', bin=True), \n",
        "                alt.Y(\"count()\")\n",
        "            )\n",
        "        )"
      ],
      "id": "264334ec",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<!--\n",
        "- `sample = np.random.normal(input.n(), 20, 100)` is `numpy` code that defines a normally-distributed random sample:\n",
        "    - mean: `input.n()`\n",
        "    - standard deviation: `20`\n",
        "    - number of observations: `100`\n",
        "--> \n",
        "\n",
        "## Build Your Second Shiny App \n",
        "- Then moving on to the UI side:\n",
        "\n",
        ". . .\n",
        "\n",
        "\\vspace{2ex}\n",
        "\n",
        "- We have defined plot as `my_hist()` on the server side\n",
        "- But on the UI side, we have to call it `\"my_hist\"`\n",
        "\n",
        ". . . \n",
        "\n",
        "\\vspace{2ex}"
      ],
      "id": "633ef009"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | eval: false\n",
        "# | echo: true \n",
        "app_ui = ui.page_fluid(\n",
        "    ui.panel_title(\"Histogram of 100 Draws from Normal with mean mu\"),\n",
        "    ui.input_slider(\"mu\", \"N\", 0, 100, 20),\n",
        "    output_widget(\"my_hist\")\n",
        ")"
      ],
      "id": "0a9f3569",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Build Your Second Shiny App \n",
        "- One last thing: add libraries at the top \n"
      ],
      "id": "b2e5e6d4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | eval: false\n",
        "# | echo: true \n",
        "from shiny import App, render, ui\n",
        "from shinywidgets import render_altair, output_widget\n",
        "import altair as alt\n",
        "import numpy as np"
      ],
      "id": "7c48aa65",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Build Your Second Shiny App \n",
        "\n",
        "`$ shiny run --reload normal_distn_app/app.py`\n",
        "\n",
        "![](pictures/basic_app_2.png){ width=40% fig-align=\"center\"}\n",
        "\n",
        "This app is stored in the folder `shiny_10/apps_after_class`\n",
        "\n",
        "## Build Your Second Shiny App: Summary\n",
        "\n",
        "- Ask user for `ui.input_slider(\"mu\")` \n",
        "\n",
        "\\vspace{-1.5ex}\n",
        "\n",
        "- Give input to server as `input.mu()`\n",
        "\n",
        "\\vspace{-1.5ex}\n",
        "\n",
        "- Simulate numbers drawn from a distribution with mean `mu`\n",
        "\n",
        "\\vspace{-1.5ex}\n",
        "\n",
        "- Define output using as `def my_hist():`\n",
        "    - Render decorator for altair output: `@render_altair`\n",
        "\n",
        "\\vspace{-1.5ex}\n",
        "\n",
        "- Display output as `output_widget(\"my_hist\")`\n",
        "\n",
        "<!-- Remark: this is very similar to what the original basic app did with `ui.input_slider(\"n\")` -> `input.n()` -> `def txt()` -> `ui.output_text_verbatim(\"txt\")` -->\n",
        "\n",
        "# Debugging \n",
        "\n",
        "## Debugging: Roadmap\n",
        "- We will now introduce some typos to show how they manifest\n",
        "- Mis-typed the plot color\n",
        "- Mis-typed a Shiny function\n",
        "- Used wrong `render`\n",
        "\n",
        "## Example 1\n",
        "\n",
        "\\vspace{2ex}\n",
        "- Say that we mis-typed the plot color\n"
      ],
      "id": "cd084121"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "@render_altair\n",
        "def my_hist():\n",
        "    sample = np.random.normal(input.n(), 20, 100)\n",
        "    df = pd.DataFrame({'sample': sample})\n",
        "    return (\n",
        "        alt.Chart(df)\n",
        "        .mark_bar(color = not_a_color)\n",
        "        .encode(x=alt.X('sample:Q', bin=True), y=\"count()\")\n",
        "    )"
      ],
      "id": "75de9b80",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Example 1, continued \n",
        "- Once we save `app.py`, the app will refresh and display:\n",
        "\n",
        "![](pictures/basic_app_error1.png){ width=50% fig-align=\"center\"}\n",
        "\n",
        "- And we will also get a similar error in terminal\n",
        "\n",
        "![](pictures/basic_app_error2.png){ width=60% fig-align=\"center\"}\n",
        "\n",
        "## Example 2\n",
        "- But say that we mis-typed one of the UI elements: `output_wdget()`\n"
      ],
      "id": "518791fe"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | eval: false\n",
        "# | echo: true\n",
        "\n",
        "app_ui = ui.page_fluid(\n",
        "    ui.panel_title(\"Histogram of 100 Draws from Normal with mean mu\"),\n",
        "    ui.input_slider(\"mu\", \"N\", 0, 100, 20),\n",
        "    output_wdget(\"my_hist\")\n",
        ")"
      ],
      "id": "c9059fb9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "- The app won't load at all and the error message is in Terminal\n",
        "\n",
        "![](pictures/basic_app_error3.png){ width=70% fig-align=\"center\"}\n",
        "\n",
        "## Example 3\n",
        "\n",
        "\\vspace{2ex}\n",
        "- Say that we used `@render.text` instead of `@render_altair`\n"
      ],
      "id": "3672cceb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "\n",
        "@render.text\n",
        "def my_hist():\n",
        "        sample = np.random.normal(input.mu(), 20, 100)\n",
        "        df = pd.DataFrame({'sample': sample})\n",
        "        return(\n",
        "            alt.Chart(df).mark_bar().encode(\n",
        "                alt.X('sample:Q', bin=True), \n",
        "                alt.Y(\"count()\")\n",
        "            )\n",
        "        )"
      ],
      "id": "56b43fcf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Example 3, continued\n",
        "\n",
        "![](pictures/basic_app_error5.png){ width=70% fig-align=\"center\"}\n",
        "\n",
        "\n",
        "\n",
        "## In-Class Exercise\n",
        "\n",
        "Try to run `apps_for_class/normal_distn_app/app_to_debug.py`. Debug the errors.\n",
        "\n",
        "## Debugging: Summary\n",
        "\n",
        "- Plain vanilla python errors (`wrongcolor`) will typically show up in the web app.\n",
        "- Shiny-specific errors (`output_wdget`) will show up in Terminal\n",
        "- Output definition on server side needs to also include \"render decorator\" functions: `@render_altair`, `@render.text`, etc.\n",
        "- Develop your app piece-by-piece and keep refreshing the app to debug as you go\n",
        "\n",
        "\n",
        "## Whole Lecture Summary\n",
        "Dashboards are a way to give (limited) Python access to your non-coding friends, managers, or the public\n",
        "\n",
        "Steps to a dashboard in Shiny\n",
        "\n",
        "\\vspace{-1ex}\n",
        "\n",
        "1. UI takes user input \n",
        "\n",
        "\\vspace{-1ex}\n",
        "\n",
        "2. Send it to the server \n",
        "\n",
        "\\vspace{-1ex}\n",
        "\n",
        "3. Run Python on the server \n",
        "\\vspace{-1ex}\n",
        "\n",
        "4. Write a Python function which returns material to display \n",
        "\\vspace{-1ex}\n",
        "\n",
        "5. Display it in the UI \n",
        "\n",
        "\\vspace{-1ex}\n",
        "\n",
        "Debugging is trickier with apps, since errors can be at command line or in the app itself\n"
      ],
      "id": "afc6a6a4"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}